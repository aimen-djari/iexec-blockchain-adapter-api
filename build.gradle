plugins {
	id 'org.springframework.boot' version '2.4.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'com.palantir.docker' version '0.26.0'
}

group = 'com.iexec.blockchain'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	// iExec
	maven {
		url "https://nexus.iex.ec/repository/maven-public/"
	}
	maven {
		url "https://jitpack.io"
	}
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
	integrationTestImplementation.extendsFrom testImplementation
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation "io.springfox:springfox-boot-starter:3.0.0"
	implementation "io.springfox:springfox-swagger-ui:3.0.0"
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	// iexec
	implementation "com.iexec.common:iexec-common:$iexecCommonVersion"
	//implementation files("../iexec-common/build/libs/iexec-common-${iexecCommonVersion}.jar")

	// web3j bug required
	// NoSuchMethodError: 'okhttp3.RequestBody okhttp3.RequestBody.create(java.lang.String, okhttp3.MediaType)'
	implementation 'com.squareup.okhttp3:okhttp:4.3.1' // Web3j issue: https://github.com/web3j/web3j/issues/1180
	// NoSuchMethodError: 'byte[] kotlin.collections.ArraysKt.copyInto(byte[], byte[], int, int, int)'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.50' // https://stackoverflow.com/a/57907899
}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir 'src/itest/java'
		}
		resources.srcDir 'src/itest/resources'
	}
}

task itest(type: Test) {
	setTestClassesDirs(sourceSets.integrationTest.output)
	classpath = sourceSets.integrationTest.runtimeClasspath
	useJUnitPlatform()
}

test {
	useJUnitPlatform()
}

def jar = rootProject.name + '-' + version + ".jar"

docker {
	name 'docker.io/iexechub/' + rootProject.name + ':dev'
	dockerfile file('docker/Dockerfile-local')
	files('build/libs/' + jar)
	buildArgs([JAR_PATH: jar ])
}
tasks.docker.dependsOn tasks.build
